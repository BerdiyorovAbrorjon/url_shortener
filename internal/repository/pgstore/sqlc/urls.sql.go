// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: urls.sql

package sqlc

import (
	"context"
	"time"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls(
    org_url,
    short_url,
    user_id
)VALUES(
    $1,$2,$3
) RETURNING id, user_id, org_url, short_url, clicks, created_at, updated_at
`

type CreateUrlParams struct {
	OrgUrl   string `json:"org_url"`
	ShortUrl string `json:"short_url"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Urls, error) {
	row := q.db.QueryRow(ctx, createUrl, arg.OrgUrl, arg.ShortUrl, arg.UserID)
	var i Urls
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgUrl,
		&i.ShortUrl,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls WHERE id=$1
`

func (q *Queries) DeleteUrl(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUrl, id)
	return err
}

const getUrlById = `-- name: GetUrlById :one
SELECT id, user_id, org_url, short_url, clicks, created_at, updated_at FROM urls
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetUrlById(ctx context.Context, id int64) (Urls, error) {
	row := q.db.QueryRow(ctx, getUrlById, id)
	var i Urls
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgUrl,
		&i.ShortUrl,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUrlByShort = `-- name: GetUrlByShort :one
SELECT id, user_id, org_url, short_url, clicks, created_at, updated_at FROM urls
WHERE short_url=$1 LIMIT 1
`

func (q *Queries) GetUrlByShort(ctx context.Context, shortUrl string) (Urls, error) {
	row := q.db.QueryRow(ctx, getUrlByShort, shortUrl)
	var i Urls
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgUrl,
		&i.ShortUrl,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementClick = `-- name: IncrementClick :exec
UPDATE urls
SET clicks = clicks+1
WHERE id=$1
`

func (q *Queries) IncrementClick(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, incrementClick, id)
	return err
}

const listUserUrls = `-- name: ListUserUrls :many
SELECT id, user_id, org_url, short_url, clicks, created_at, updated_at FROM urls
WHERE user_id=$1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserUrlsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserUrls(ctx context.Context, arg ListUserUrlsParams) ([]Urls, error) {
	rows, err := q.db.Query(ctx, listUserUrls, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Urls{}
	for rows.Next() {
		var i Urls
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrgUrl,
			&i.ShortUrl,
			&i.Clicks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrgUrl = `-- name: UpdateOrgUrl :one
UPDATE urls
SET
    org_url=$2,
    updated_at=$3
WHERE id=$1
RETURNING id, user_id, org_url, short_url, clicks, created_at, updated_at
`

type UpdateOrgUrlParams struct {
	ID        int64     `json:"id"`
	OrgUrl    string    `json:"org_url"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateOrgUrl(ctx context.Context, arg UpdateOrgUrlParams) (Urls, error) {
	row := q.db.QueryRow(ctx, updateOrgUrl, arg.ID, arg.OrgUrl, arg.UpdatedAt)
	var i Urls
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgUrl,
		&i.ShortUrl,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
